name: Sync MongoDB Data

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch: # Allows manual trigger

jobs:
  sync-mongodb:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Initialize project and install dependencies
        run: |
          npm init -y
          npm install mongoose --save
          echo "Dependencies installed successfully."

      - name: Sync data from MongoDB
        run: |
          node -e '
            const mongoose = require("mongoose");
            const fs = require("fs");

            console.log("MONGODB_URI set:", !!process.env.MONGODB_URI);
            console.log("MONGODB_USER set:", !!process.env.MONGODB_USER);
            console.log("MONGODB_PASSWORD set:", !!process.env.MONGODB_PASSWORD);

            const uri = process.env.MONGODB_URI;
            if (!uri) {
              console.error("MongoDB URI not set in environment variables");
              process.exit(1);
            }

            mongoose.connect(uri, { 
              useNewUrlParser: true, 
              useUnifiedTopology: true,
              auth: {
                username: process.env.MONGODB_USER,
                password: process.env.MONGODB_PASSWORD
              }
            })
              .then(async () => {
                console.log("Connected to MongoDB");

                const dogSchema = new mongoose.Schema({
                  _id: String,
                  nfcTagId: String,
                  name: String,
                  description: String,
                  age: String,
                  weight: String,
                  coat: String,
                  coatColor: String,
                  sex: String,
                  eyeColor: String,
                  neutered: String,
                  breed: String,
                  personality: String,
                  loves: String,
                  routine: String,
                  training: String,
                  quirks: String,
                  medicalInfo: {
                    documents: [String],
                    shots: String,
                    medications: String,
                    vaccinations: String,
                    checkups: String,
                    allergies: String
                  },
                  socials: {
                    youtube: String,
                    facebook: String,
                    instagram: String,
                    donationLink: String
                  },
                  testimonials: [{ text: String, author: String }],
                  gallery: [{ url: String, description: String }],
                  photoUrl: String,
                  ownerId: String
                });
                const Dog = mongoose.model("Dog", dogSchema, "dogs");

                const locationSchema = new mongoose.Schema({
                  _id: String,
                  dogId: String,
                  deviceName: String,
                  latitude: Number,
                  longitude: Number,
                  timestamp: Date,
                  active: Boolean
                });
                const Location = mongoose.model("Location", locationSchema, "locations");

                const userSchema = new mongoose.Schema({
                  _id: String,
                  username: String,
                  password: String,
                  email: String,
                  device: String,
                  name: String,
                  phone: String,
                  address: String
                });
                const User = mongoose.model("User", userSchema, "users");

                const deviceSchema = new mongoose.Schema({
                  _id: String,
                  userId: String,
                  deviceName: String,
                  deviceId: String
                });
                const Device = mongoose.model("Device", deviceSchema, "devices");

                try {
                  const dogs = await Dog.find();
                  const locations = await Location.find();
                  const users = await User.find();
                  const devices = await Device.find();

                  if (!fs.existsSync("data")) {
                    fs.mkdirSync("data", { recursive: true, mode: 0o755 });
                  }
                  fs.writeFileSync("data/dogs.json", JSON.stringify(dogs, null, 2));
                  fs.writeFileSync("data/locations.json", JSON.stringify(locations, null, 2));
                  fs.writeFileSync("data/users.json", JSON.stringify(users, null, 2));
                  fs.writeFileSync("data/devices.json", JSON.stringify(devices, null, 2));
                  console.log("Data synced successfully");
                } catch (error) {
                  console.error("Error syncing data:", error.message, error.stack);
                  process.exit(1);
                } finally {
                  mongoose.connection.close();
                }
              })
              .catch(err => {
                console.error("MongoDB connection error:", err.message, err.stack);
                process.exit(1);
              });
          '
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MONGODB_USER: ${{ secrets.MONGODB_USER }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add data/dogs.json data/locations.json data/users.json data/devices.json
          git commit -m "Sync MongoDB data [skip ci]" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
